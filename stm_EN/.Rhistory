model1_res <- model1_searchK$results
model1_res <- unnest(model1_res,c(K,exclus,semcoh))
ggplot(model1_res, aes(x = semcoh, y = exclus, label = K)) +
geom_point() +
geom_text(vjust = -0.5, hjust = 0.5) +
labs(x = "Semantic Coherence", y = "Exclusivity", title = "Semantic Coherence vs Exclusivity") +
theme_minimal()
plot(model1_searchK)
stm_model_year_11 <- stm(out$documents, out$vocab, K=11,
prevalence= ~s(pub.year),
data=out$meta, init.type="Spectral",seed=2025,
verbose = F)
stm_model_year_14 <- stm(out$documents, out$vocab, K=14,
prevalence= ~s(pub.year),
data=out$meta, init.type="Spectral",seed=2025,
verbose = F)
# K = 14
labelTopics(stm_model_year_11, n = 10)
install.packages(c("glmnet", "haven"))
# K = 14
labelTopics(stm_model_year_11, n = 10)
# K = 14
labelTopics(stm_model_year_14, n = 10)
plot(model1_searchK)
model1_res <- model1_searchK$results
model1_res <- unnest(model1_res,c(K,exclus,semcoh))
ggplot(model1_res, aes(x = semcoh, y = exclus, label = K)) +
geom_point() +
geom_text(vjust = -0.5, hjust = 0.5) +
labs(x = "Semantic Coherence", y = "Exclusivity", title = "Semantic Coherence vs Exclusivity") +
theme_minimal()
plot(stm_model_year_14, topics= 1:10,n = 10)
plot(stm_model_year_11, topics= 1:10,n = 10)
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 10,        # 너비 (인치 단위)
height = 8,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 그래프 그리기 (사용자님의 코드)
plot(stm_model_year_11, topics = 1:10, n = 10)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 15,        # 너비 (인치 단위)
height = 10,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 그래프 그리기 (사용자님의 코드)
plot(stm_model_year_11, topics = 1:10, n = 10)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 15,        # 너비 (인치 단위)
height = 10,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 그래프 그리기 (사용자님의 코드)
plot(stm_model_year_11, topics = 1:11, n = 10)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 30,        # 너비 (인치 단위)
height = 15,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 그래프 그리기 (사용자님의 코드)
plot(stm_model_year_11, topics = 1:11, n = 10)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 15,        # 너비 (인치 단위)
height = 10,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 그래프 그리기 (사용자님의 코드)
plot(stm_model_year_11, topics = 1:11, n = 10)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
width = 15,        # 너비 (인치 단위)
height = 10,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 플롯 여백 설정: par(mar = c(bottom, left, top, right))
# 글씨가 커지므로, 단어가 표시되는 쪽의 여백을 더 확보합니다.
# (오른쪽에 단어가 표시된다고 가정하고 오른쪽 여백을 7.1로 늘림)
original_mar <- par("mar") # 현재 여백 저장
par(mar = c(5.1, 4.1, 4.1, 7.1)) # 오른쪽 여백을 이전보다 더 늘림 (예: 6.1 -> 7.1)
# 그래프 그리기
# text.cex 값을 1보다 크게 설정하여 글자 크기를 키웁니다. (예: 1.0, 1.2)
plot(stm_model_year_11,
topics = 1:11,
n = 10,
text.cex = 1.2) # 텍스트 크기 증가 (예: 0.8 -> 1.2)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
# PNG 그래픽 장치 시작
png(filename = 'stm_k14.png',
width = 15,        # 너비 (인치 단위)
height = 10,       # 높이 (인치 단위)
units = "in",     # 단위 (인치)
res = 300)        # 해상도 (ppi)
# 플롯 여백 설정: par(mar = c(bottom, left, top, right))
# 글씨가 커지므로, 단어가 표시되는 쪽의 여백을 더 확보합니다.
# (오른쪽에 단어가 표시된다고 가정하고 오른쪽 여백을 7.1로 늘림)
original_mar <- par("mar") # 현재 여백 저장
par(mar = c(5.1, 4.1, 4.1, 7.1)) # 오른쪽 여백을 이전보다 더 늘림 (예: 6.1 -> 7.1)
# 그래프 그리기
# text.cex 값을 1보다 크게 설정하여 글자 크기를 키웁니다. (예: 1.0, 1.2)
plot(stm_model_year_14,
topics = 1:14,
n = 10,
text.cex = 1.2) # 텍스트 크기 증가 (예: 0.8 -> 1.2)
# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
m1_K <- stm_model_year_11$settings$dim$K
stm_effect_model_year <-  estimateEffect(1:m1_K ~s(pub.year),
stm_model_year_11, meta = out$meta, uncertainty = "Global",prior=1e-5)
#### 시간에 따른 토픽 비율 변화 (토픽별로)
stm_label_year<- labelTopics(stm_model_year_11, n = 10)
# stm_custom_label <- c('접종순서','거리두기 단계','국내 감염 상황','생활/문화/교육','관련연구/기술',
#                                       '지원정책','관련주','백신 승인','미국 대선','경제 전망','정부/청와대',
#                                       '해외 감염 상황','접종후속대책','변이 바이러스','국제협력','증상/전파','백신/치료제 개발','부작용')
par(mfrow=c(2,2))
j <- 1
for (i in c(1:m1_K))
{
plot(stm_effect_model_year, "pub.year", method = "continuous", topics = i, printlegend = F,
# main = stm_custom_label[j], xaxt = "n")
#main = paste(paste0('T', i,':'),paste(stm_custom_label[i], collapse = ", "),sep=' '),
#xaxt ="n")
# 토픽 이름대신 keyword로 표현하고 싶으면 아래 main 활용
main =  paste('topic', i,paste(stm_label_year$frex[i,1:4], collapse = ", "),sep=' '))
yearseq <- seq(from=as.Date('2002-01-01'), to=as.Date('2024-12-31'),by='year')
yearnames <- year(yearseq)
axis(1,at=as.numeric(yearseq) - min(as.numeric(yearseq)),labels=yearnames)
j <- j+1
}
library(tidyverse)
library(stm)
library(stminsights)
library(parallel)
library(vroom)
library(reticulate)
library(lubridate)
py_config()
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산 (모든 플롯에 동일하게 적용될 수 있음)
# stm_effect_model_year$data$pub.year에 실제 데이터가 있다고 가정
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
# 1. 파일명 생성 (예: topics_1-4.png, topics_5-8.png)
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
filename_png <- paste0("topic_proportions_topics_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
# 2. PNG 그래픽 장치 시작 (2x2 플롯을 담을 수 있게 크기 설정)
png(filename = filename_png,
width = 18,        # 2x2 플롯을 위한 너비 (인치) - 각 플롯이 약 9x7 크기 가정
height = 14,       # 2x2 플롯을 위한 높이 (인치)
units = "in",
res = 300)         # 해상도 (ppi)
# 3. 플롯 배열 및 여백 설정
par(mfrow = c(2, 2))   # 2x2 배열로 플롯 배치
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 제목과 축 레이블 공간을 고려하여 이전보다 약간 작게 설정할 수 있음
par(mar = c(4.5, 4.5, 4, 2.1)) # 예시: 하단, 좌측, 상단, 우측
# 필요시 par(oma = c(0,0,2,0)) 등으로 전체 제목 공간 확보
# 현재 파일에 들어갈 토픽들만 루프 실행
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
# 메인 제목 (공간을 위해 키워드 수를 줄일 수 있음, 예: 1:3)
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:3], collapse = ", "))
# 4. 플롯 생성
plot(stm_effect_model_year,
covariate = "pub.year", # 실제 사용된 covariate 이름으로 변경
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n", # x축은 아래에서 사용자 정의
cex.main = 1.0, # 메인 제목 크기 (기본값 1.2 또는 1.5일 수 있음, mfrow시 조절)
cex.axis = 0.8, # 축 눈금 레이블 크기
cex.lab = 0.9)  # 축 제목 크기
# 5. 사용자 정의 x축 추가
# pretty() 함수는 데이터 범위에 맞춰 보기 좋은 눈금 위치를 자동 계산
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5) # 약 5개의 눈금 생성
axis(1, at = tick_years, labels = tick_years, cex.axis = 0.8) # x축 눈금 크기 조절
} # 현재 파일 내 토픽 루프 종료
# (선택 사항) 만약 현재 파일에 빈 공간이 남는 경우 (m1_K가 4의 배수가 아닐 때 마지막 파일)
# 빈 공간에 plot.new()를 호출하여 레이아웃을 유지할 수 있습니다.
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new() # 빈 플롯으로 채움
}
}
# 6. 현재 PNG 파일 장치 닫기
dev.off()
cat("플롯 그룹이", filename_png, "로 저장되었습니다.\n")
} # 전체 파일 루프 종료
# 모든 플롯 작업 후 mfrow 및 mar 설정을 원래대로 돌리고 싶다면:
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시
cat("모든 2x2 플롯 그룹 저장이 완료되었습니다.\n")
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
filename_png <- paste0("topic_proportions_larger_text_topics_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,
height = 14,
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 늘려서 커진 제목을 수용
par(mar = c(4.5, 4.5, 5.0, 2.1)) # 상단 여백 4 -> 5.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:3], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.4,  # 메인 제목 크기 증가 (예: 1.0 -> 1.4)
cex.axis = 1.0,  # 축 눈금 레이블 크기 증가 (예: 0.8 -> 1.0)
cex.lab = 1.2)   # 축 제목 크기 증가 (예: 0.9 -> 1.2)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기도 동일하게 증가 (예: 0.8 -> 1.0)
}
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new()
}
}
dev.off()
cat("글씨가 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
}
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1))
cat("모든 2x2 플롯 그룹 (글씨 키움) 저장이 완료되었습니다.\n")
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
filename_png <- paste0("topic_proportions_larger_text_topics_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,
height = 14,
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 늘려서 커진 제목을 수용
par(mar = c(4.5, 4.5, 5.0, 2.1)) # 상단 여백 4 -> 5.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.4,  # 메인 제목 크기 증가 (예: 1.0 -> 1.4)
cex.axis = 1.0,  # 축 눈금 레이블 크기 증가 (예: 0.8 -> 1.0)
cex.lab = 1.2)   # 축 제목 크기 증가 (예: 0.9 -> 1.2)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기도 동일하게 증가 (예: 0.8 -> 1.0)
}
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new()
}
}
dev.off()
cat("글씨가 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
}
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1))
cat("모든 2x2 플롯 그룹 (글씨 키움) 저장이 완료되었습니다.\n")
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
# 파일명은 이전과 동일한 패턴을 유지합니다.
filename_png <- paste0("topic_proportions_larger_text_topics_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,       # 전체 PNG 너비 유지
height = 14,      # 전체 PNG 높이 유지
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 제목 크기에 맞춰 더 늘림
par(mar = c(4.5, 4.5, 6.0, 2.1)) # 상단 여백 5.0 -> 6.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
# 제목에 사용될 키워드 수는 3개로 유지 (필요시 조절)
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:3], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.8,  # 메인 제목 크기 대폭 증가 (예: 1.4 -> 1.8)
cex.axis = 1.0,  # 축 눈금 레이블 크기 유지 (이전과 동일)
cex.lab = 1.2)   # 축 제목 크기 유지 (이전과 동일)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기 유지
} # 현재 파일 내 토픽 루프 종료
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new() # 빈 플롯으로 채움
}
}
dev.off() # 현재 PNG 파일 장치 닫기
cat("제목이 더 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
} # 전체 파일 루프 종료
# 작업 후 R 기본 플롯 파라미터로 복원 (선택 사항)
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시
cat("모든 2x2 플롯 그룹 (제목 추가 확대) 저장이 완료되었습니다.\n")
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
# 파일명은 이전과 동일한 패턴을 유지합니다.
filename_png <- paste0("topic_proportions_larger_text_topics_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,       # 전체 PNG 너비 유지
height = 14,      # 전체 PNG 높이 유지
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 제목 크기에 맞춰 더 늘림
par(mar = c(4.5, 4.5, 6.0, 2.1)) # 상단 여백 5.0 -> 6.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
# 제목에 사용될 키워드 수는 3개로 유지 (필요시 조절)
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.8,  # 메인 제목 크기 대폭 증가 (예: 1.4 -> 1.8)
cex.axis = 1.0,  # 축 눈금 레이블 크기 유지 (이전과 동일)
cex.lab = 1.2)   # 축 제목 크기 유지 (이전과 동일)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기 유지
} # 현재 파일 내 토픽 루프 종료
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new() # 빈 플롯으로 채움
}
}
dev.off() # 현재 PNG 파일 장치 닫기
cat("제목이 더 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
} # 전체 파일 루프 종료
# 작업 후 R 기본 플롯 파라미터로 복원 (선택 사항)
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시
cat("모든 2x2 플롯 그룹 (제목 추가 확대) 저장이 완료되었습니다.\n")
m1_K <- stm_model_year_14$settings$dim$K
stm_effect_model_year <-  estimateEffect(1:m1_K ~s(pub.year),
stm_model_year_14, meta = out$meta, uncertainty = "Global",prior=1e-5)
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
# 파일명은 이전과 동일한 패턴을 유지합니다.
filename_png <- paste0("topic_proportions_larger_text_topics_14", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,       # 전체 PNG 너비 유지
height = 14,      # 전체 PNG 높이 유지
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 제목 크기에 맞춰 더 늘림
par(mar = c(4.5, 4.5, 6.0, 2.1)) # 상단 여백 5.0 -> 6.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
# 제목에 사용될 키워드 수는 3개로 유지 (필요시 조절)
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.8,  # 메인 제목 크기 대폭 증가 (예: 1.4 -> 1.8)
cex.axis = 1.0,  # 축 눈금 레이블 크기 유지 (이전과 동일)
cex.lab = 1.2)   # 축 제목 크기 유지 (이전과 동일)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기 유지
} # 현재 파일 내 토픽 루프 종료
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new() # 빈 플롯으로 채움
}
}
dev.off() # 현재 PNG 파일 장치 닫기
cat("제목이 더 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
} # 전체 파일 루프 종료
# 작업 후 R 기본 플롯 파라미터로 복원 (선택 사항)
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시
cat("모든 2x2 플롯 그룹 (제목 추가 확대) 저장이 완료되었습니다.\n")
labelTopics(stm_model_year_14, n = 10)
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
stm_label_year<- labelTopics(stm_model_year_14, n = 10)
# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))
for (file_num in 1:num_files) {
start_topic_in_file <- (file_num - 1) * plots_per_file + 1
end_topic_in_file <- min(file_num * plots_per_file, m1_K)
# 파일명은 이전과 동일한 패턴을 유지합니다.
filename_png <- paste0("topic_proportions_larger_text_topics(14)_", start_topic_in_file, "_to_", end_topic_in_file, ".png")
png(filename = filename_png,
width = 18,       # 전체 PNG 너비 유지
height = 14,      # 전체 PNG 높이 유지
units = "in",
res = 300)
par(mfrow = c(2, 2))
# 각 subplot의 여백: par(mar = c(bottom, left, top, right))
# 상단 여백을 제목 크기에 맞춰 더 늘림
par(mar = c(4.5, 4.5, 6.0, 2.1)) # 상단 여백 5.0 -> 6.0으로 증가
for (i in start_topic_in_file:end_topic_in_file) {
plot_counter_total <- plot_counter_total + 1
# 제목에 사용될 키워드 수는 3개로 유지 (필요시 조절)
main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))
plot(stm_effect_model_year,
covariate = "pub.year",
method = "continuous",
topics = i,
printlegend = FALSE,
main = main_title,
xaxt = "n",
cex.main = 1.8,  # 메인 제목 크기 대폭 증가 (예: 1.4 -> 1.8)
cex.axis = 1.0,  # 축 눈금 레이블 크기 유지 (이전과 동일)
cex.lab = 1.2)   # 축 제목 크기 유지 (이전과 동일)
tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기 유지
} # 현재 파일 내 토픽 루프 종료
plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
if (plots_in_current_file < plots_per_file) {
for (j in 1:(plots_per_file - plots_in_current_file)) {
plot.new() # 빈 플롯으로 채움
}
}
dev.off() # 현재 PNG 파일 장치 닫기
cat("제목이 더 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")
} # 전체 파일 루프 종료
# 작업 후 R 기본 플롯 파라미터로 복원 (선택 사항)
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시
cat("모든 2x2 플롯 그룹 (제목 추가 확대) 저장이 완료되었습니다.\n")
