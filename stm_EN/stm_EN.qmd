---
title: "STM"
format: html
editor: visual
jupyter: python3
---

```{r}
library(tidyverse)
library(stm)
library(stminsights)
library(parallel)
library(vroom)
library(reticulate)
library(lubridate)
py_config()
```

```{r}
df <- data.frame(py_load_object('./250602_영어영문_토큰화.pkl'))
```

```{r}
# 필요한 컬럼만 활용
df <- df %>% select(article.id, pub.year,trigrams_lowercase)
```

```{r}
df$pub.year <- as.numeric(df$pub.year)
```

```{r}
unique_years <- unique(df$pub.year)
print(unique_years)
print(length(unique_years))
```

```{r}
# 토큰 리스트->문자열 처리 (for STM)
df$trigrams_lowercase <- map_chr(df$trigrams_lowercase,str_c,collapse='  ')
```

```{r}
myprocess <- textProcessor(df$trigrams_lowercase, metadata = df ,wordLengths=c(1,Inf),lowercase = T,
                           removenumbers = F, removepunctuation = F, removestopwords = F, stem = F,customstopwords = c('-','-'))
myprocess
length(myprocess$docs.removed)
```

```{r}
# N개 이상의 문서에서 등장한 단어만 사용(lower.thresh)
out <- prepDocuments(myprocess$documents, myprocess$vocab, myprocess$meta,lower.thresh = 100)
```

```{r}
model1_searchK <- searchK(out$documents, out$vocab, K = c(4:30),
                                prevalence = ~s(pub.year),
                                data = out$meta, init.type="Spectral"
                                  ,cores=detectCores()-4)
saveRDS(model1_searchK,'model1_searchK.rds')
```

```{r}
plot(model1_searchK)
```

```{r}
model1_res <- model1_searchK$results
model1_res <- unnest(model1_res,c(K,exclus,semcoh))

ggplot(model1_res, aes(x = semcoh, y = exclus, label = K)) +
  geom_point() +
  geom_text(vjust = -0.5, hjust = 0.5) +
  labs(x = "Semantic Coherence", y = "Exclusivity", title = "Semantic Coherence vs Exclusivity") +
  theme_minimal()
```

```{r}
stm_model_year_11 <- stm(out$documents, out$vocab, K=11,
              prevalence= ~s(pub.year),
              data=out$meta, init.type="Spectral",seed=2025,
              verbose = F)

stm_model_year_14 <- stm(out$documents, out$vocab, K=14,
              prevalence= ~s(pub.year),
              data=out$meta, init.type="Spectral",seed=2025,
              verbose = F)
```

```{r}
# K = 11
labelTopics(stm_model_year_11, n = 10)
```

```{r}
# PNG 그래픽 장치 시작
png(filename = 'stm_k11.png',
    width = 15,        # 너비 (인치 단위)
    height = 10,       # 높이 (인치 단위)
    units = "in",     # 단위 (인치)
    res = 300)        # 해상도 (ppi)

# 플롯 여백 설정: par(mar = c(bottom, left, top, right))
# 글씨가 커지므로, 단어가 표시되는 쪽의 여백을 더 확보합니다.
# (오른쪽에 단어가 표시된다고 가정하고 오른쪽 여백을 7.1로 늘림)
original_mar <- par("mar") # 현재 여백 저장
par(mar = c(5.1, 4.1, 4.1, 7.1)) # 오른쪽 여백을 이전보다 더 늘림 (예: 6.1 -> 7.1)

# 그래프 그리기
# text.cex 값을 1보다 크게 설정하여 글자 크기를 키웁니다. (예: 1.0, 1.2)
plot(stm_model_year_11,
     topics = 1:11,
     n = 10,
     text.cex = 1.2) # 텍스트 크기 증가 (예: 0.8 -> 1.2)

# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
```

```{r}
# K = 14
labelTopics(stm_model_year_14, n = 10)
```

```{r}
# PNG 그래픽 장치 시작
png(filename = 'stm_k14.png',
    width = 15,        # 너비 (인치 단위)
    height = 10,       # 높이 (인치 단위)
    units = "in",     # 단위 (인치)
    res = 300)        # 해상도 (ppi)

# 플롯 여백 설정: par(mar = c(bottom, left, top, right))
# 글씨가 커지므로, 단어가 표시되는 쪽의 여백을 더 확보합니다.
# (오른쪽에 단어가 표시된다고 가정하고 오른쪽 여백을 7.1로 늘림)
original_mar <- par("mar") # 현재 여백 저장
par(mar = c(5.1, 4.1, 4.1, 7.1)) # 오른쪽 여백을 이전보다 더 늘림 (예: 6.1 -> 7.1)

# 그래프 그리기
# text.cex 값을 1보다 크게 설정하여 글자 크기를 키웁니다. (예: 1.0, 1.2)
plot(stm_model_year_14,
     topics = 1:14,
     n = 10,
     text.cex = 1.2) # 텍스트 크기 증가 (예: 0.8 -> 1.2)

# 그래픽 장치 닫기 (이것을 실행해야 파일이 완전히 저장됩니다)
dev.off()
```

```{r}
# STM 모델의 theta 매트릭스에서 토픽 비중 추출
topic_matrix <- stm_model_year_10[["theta"]]

# 각 토픽의 평균 비중 계산
average_topic_proportions <- colMeans(topic_matrix)

# 데이터프레임으로 변환
topic_proportions_df <- data.frame(
  Topic = paste("Topic", 1:ncol(topic_matrix), sep = " "),
  Proportion = average_topic_proportions
)

# 주요 단어 추출 (frex 기준)
topic_labels <- labelTopics(stm_model_year_10, n = 10)$frex

# 데이터프레임에 주요 단어 추가
topic_proportions_df <- topic_proportions_df %>%
  mutate(Frex_Top_Words = apply(topic_labels, 1, paste, collapse = ", "))

# CSV 파일로 저장
write.csv(topic_proportions_df, "topic_proportions.csv", row.names = FALSE)
```

```{r}
m1_K <- stm_model_year_11$settings$dim$K
stm_effect_model_year <-  estimateEffect(1:m1_K ~s(pub.year),
                                 stm_model_year_11, meta = out$meta, uncertainty = "Global",prior=1e-5)
```

```{r}
# summary(stm_effect_model_year, topics= 1:m1_K)
```

```{r}
#### 시간에 따른 토픽 비율 변화 (토픽별로)
stm_label_year<- labelTopics(stm_model_year_11, n = 10)
# stm_custom_label <- c('접종순서','거리두기 단계','국내 감염 상황','생활/문화/교육','관련연구/기술',
#                                       '지원정책','관련주','백신 승인','미국 대선','경제 전망','정부/청와대',
#                                       '해외 감염 상황','접종후속대책','변이 바이러스','국제협력','증상/전파','백신/치료제 개발','부작용')

par(mfrow=c(2,2))
j <- 1
for (i in c(1:m1_K))
{
  plot(stm_effect_model_year, "pub.year", method = "continuous", topics = i, printlegend = F,
  # main = stm_custom_label[j], xaxt = "n")
  #main = paste(paste0('T', i,':'),paste(stm_custom_label[i], collapse = ", "),sep=' '),
  #xaxt ="n")
  
  # 토픽 이름대신 keyword로 표현하고 싶으면 아래 main 활용 
  main =  paste('topic', i,paste(stm_label_year$frex[i,1:4], collapse = ", "),sep=' '))
  
  yearseq <- seq(from=as.Date('2002-01-01'), to=as.Date('2024-12-31'),by='year')
yearnames <- year(yearseq)
axis(1,at=as.numeric(yearseq) - min(as.numeric(yearseq)),labels=yearnames)
  
  j <- j+1

}
```

```{r}
plots_per_file <- 4
num_files <- ceiling(m1_K / plots_per_file) # 생성될 총 파일 수
plot_counter_total <- 0 # 전체 플롯 카운터
stm_label_year<- labelTopics(stm_model_year_11, n = 10)

# 데이터의 연도 범위 미리 계산
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))

for (file_num in 1:num_files) {
  start_topic_in_file <- (file_num - 1) * plots_per_file + 1
  end_topic_in_file <- min(file_num * plots_per_file, m1_K)
  # 파일명은 이전과 동일한 패턴을 유지합니다.
  filename_png <- paste0("topic_proportions_larger_text_topics(14)_", start_topic_in_file, "_to_", end_topic_in_file, ".png")

  png(filename = filename_png,
      width = 18,       # 전체 PNG 너비 유지
      height = 14,      # 전체 PNG 높이 유지
      units = "in",
      res = 300)

  par(mfrow = c(2, 2))
  # 각 subplot의 여백: par(mar = c(bottom, left, top, right))
  # 상단 여백을 제목 크기에 맞춰 더 늘림
  par(mar = c(4.5, 4.5, 6.0, 2.1)) # 상단 여백 5.0 -> 6.0으로 증가

  for (i in start_topic_in_file:end_topic_in_file) {
    plot_counter_total <- plot_counter_total + 1

    # 제목에 사용될 키워드 수는 3개로 유지 (필요시 조절)
    main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))

    plot(stm_effect_model_year,
         covariate = "pub.year",
         method = "continuous",
         topics = i,
         printlegend = FALSE,
         main = main_title,
         xaxt = "n",
         cex.main = 1.8,  # 메인 제목 크기 대폭 증가 (예: 1.4 -> 1.8)
         cex.axis = 1.0,  # 축 눈금 레이블 크기 유지 (이전과 동일)
         cex.lab = 1.2)   # 축 제목 크기 유지 (이전과 동일)

    tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
    axis(1, at = tick_years, labels = tick_years, cex.axis = 1.0) # x축 눈금 크기 유지

  } # 현재 파일 내 토픽 루프 종료

  plots_in_current_file <- end_topic_in_file - start_topic_in_file + 1
  if (plots_in_current_file < plots_per_file) {
    for (j in 1:(plots_per_file - plots_in_current_file)) {
      plot.new() # 빈 플롯으로 채움
    }
  }

  dev.off() # 현재 PNG 파일 장치 닫기
  cat("제목이 더 커진 플롯 그룹이", filename_png, "로 저장되었습니다.\n")

} # 전체 파일 루프 종료

# 작업 후 R 기본 플롯 파라미터로 복원 (선택 사항)
# par(mfrow = c(1, 1))
# par(mar = c(5.1, 4.1, 4.1, 2.1)) # R 기본값 예시

cat("모든 2x2 플롯 그룹 (제목 추가 확대) 저장이 완료되었습니다.\n")
```

```{r}
# --- 사전 설정 (기존 코드와 유사하게) ---

# 이 코드를 실행하기 전에 stm_model_year_11, m1_K, stm_effect_model_year 변수가
# R 환경에 생성되어 있어야 합니다.

# 토픽 레이블 생성
stm_label_year <- labelTopics(stm_model_year_11, n = 10)

# 데이터의 연도 범위 미리 계산 (안정성을 위해 effect 모델 객체에서 직접 가져옴)
min_year_data <- floor(min(stm_effect_model_year$data$pub.year, na.rm = TRUE))
max_year_data <- ceiling(max(stm_effect_model_year$data$pub.year, na.rm = TRUE))

# --- 1. 저장할 폴더 생성 ---

# 저장할 폴더의 이름을 변수로 지정합니다.
output_folder <- "topic_plots"

# 폴더가 존재하지 않는 경우에만 폴더를 생성합니다.
if (!dir.exists(output_folder)) {
  dir.create(output_folder)
  cat(paste0("'", output_folder, "' 폴더를 생성했습니다.\n"))
} else {
  cat(paste0("'", output_folder, "' 폴더가 이미 존재합니다. 기존 파일을 덮어쓸 수 있습니다.\n"))
}


# --- 2. 플롯을 하나씩 개별 파일로 저장하는 루프 ---

# m1_K (전체 토픽 수) 만큼 반복합니다.
for (i in 1:m1_K) {
  
  # 파일명 설정: 각 플롯마다 고유한 파일명을 생성합니다.
  # 원본 파일명의 형식을 일부 유지하여 "topic_prevalence_year_topic_1.png" 등으로 만듭니다.
  base_filename <- paste0("topic_prevalence_year_topic_", i, ".png")
  full_filepath <- file.path(output_folder, base_filename)
  
  # PNG 그래픽 장치 열기: 단일 플롯에 적합한 크기로 설정합니다.
  png(filename = full_filepath,
      width = 10,      # 단일 플롯 너비 (인치)
      height = 7,       # 단일 플롯 높이 (인치)
      units = "in",
      res = 300)        # 고해상도 설정 유지

  # 플롯 여백 설정: 큰 제목을 위한 충분한 상단 공간을 확보합니다.
  par(mar = c(5.1, 4.5, 6.0, 2.1)) # par(mar = c(bottom, left, top, right))

  # 플롯 제목 생성 (상위 5개 단어 포함)
  main_title <- paste0('Topic ', i, ': ', paste(stm_label_year$frex[i, 1:5], collapse = ", "))

  # stm 효과 플롯 그리기
  plot(stm_effect_model_year,
       covariate = "pub.year",
       method = "continuous",
       topics = i,
       printlegend = FALSE,
       main = main_title,
       xaxt = "n",
       cex.main = 1.8,  # 메인 제목 크기
       cex.axis = 1.2,  # 축 눈금 레이블 크기 (단일 플롯이므로 키움)
       cex.lab = 1.4)   # 축 제목 크기 (단일 플롯이므로 키움)

  # x축 눈금 직접 설정
  tick_years <- pretty(seq(min_year_data, max_year_data, by=1), n=5)
  axis(1, at = tick_years, labels = tick_years, cex.axis = 1.2)

  # 현재 그린 플롯을 파일로 저장하고 그래픽 장치를 닫습니다.
  dev.off() 
  
  # 진행 상황을 콘솔에 출력
  cat(paste0("토픽 ", i, "의 플롯이 '", full_filepath, "' 파일로 저장되었습니다.\n"))
  
} # for 루프 종료

# R의 기본 플롯 파라미터로 복원 (선택 사항)
# par(mar = c(5.1, 4.1, 4.1, 2.1), mfrow = c(1, 1))

cat(paste0("\n모든 개별 플롯 저장이 '", output_folder, "' 폴더에 완료되었습니다.\n"))
```
